#pragma once

#include "openssl/sha.h"

#include <iostream>
#include <fstream>
#include <vector>

#include <iomanip>
#include <sstream>

class FileDigest {
private:

	/**
	 * Get size of digests generated for this algorithm
	 * 
	 * @param algorithm The desired digest algorithm
	 * @return The size (in bytes) of its digests
	 * @throws NoSuchAlgorithmException
	 */
	static int getDigestSize(std::string algorithm);

	/**
	 * Computes file digest for a given file.
	 * 
	 * @param filename - the system-dependent file name.
	 * @return Byte array with resulting file digest.
	 */
	static std::vector<unsigned char> computeFileChecksum(std::string filename);

	/**
     * Converts a byte array to a hexadecimal string.
     * 
     * @param digest - byte array with resulting file digest.
     * @return Hexadecimal string of the digest.
     */
	static std::string getChecksumHexString(std::vector<unsigned char> digest);

public:
	/**
	 * Message digest algorithm used to identify files in nanoP2P.
	 */
	static constexpr const char* algorithm = "SHA-1";

	/**
	 * Get size of digests generated by this class
	 * 
	 * @return The size (in bytes) of digest, or 0 in case of error.
	 */
	static int getFileDigestSize();

    /**
	 * Computes file digest for a given file.
	 * 
	 * @param filename - the system-dependent file name.
	 * @return Byte array with resulting file digest.
	 */
	static std::string computeFileChecksumString(const std::string& filename);
};